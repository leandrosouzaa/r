base[is.na(base$sex)]
base$income = factor(base$income, levels = c(' <=50K', ' >50K'), labels = c(0, 1))
base[,1] = scale(base[, 1])
base[,3] = scale(base[, 3])
base[,11:13] = scale(base[, 11:13])
library(caTools)
set.seed(1)
divisao = sample.split(base$income, SplitRatio = 0.75)
print(divisao)
base_treinamento = subset(x = base, divisao == TRUE)
base_testes = subset(base, divisao == FALSE)
classificador = rpart(formula = income ~ ., data = base_treinamento)
library('rpart.plot')
rpart.plot(classificador)
previsoes = predict(classificador, newdata = base_testes[-15], type = 'class')
matriz_confusao = table(base_testes[, 15], previsoes)
print(matriz_confusao)
# install.packages('caret')
library(caret)
# estatisticas do algoritmo de previsão
confusionMatrix(matriz_confusao)
gc()
base = read.csv("census/census.csv")
base$X = NULL
library(caTools)
set.seed(1)
divisao = sample.split(base$income, SplitRatio = 0.75)
print(divisao)
base_treinamento = subset(x = base, divisao == TRUE)
base_testes = subset(base, divisao == FALSE)
classificador = rpart(formula = income ~ ., data = base_treinamento)
library('rpart.plot')
rpart.plot(classificador)
previsoes = predict(classificador, newdata = base_testes[-15], type = 'class')
matriz_confusao = table(base_testes[, 15], previsoes)
print(matriz_confusao)
# install.packages('caret')
library(caret)
# estatisticas do algoritmo de previsão
confusionMatrix(matriz_confusao)
base = read.csv('wine-quality/wine-quality.csv')
summary(base)
View(base)
base = read.csv('wine-quality/wine-quality.csv')
summary(base)
library(readr)
wine_quality <- read_delim("wine-quality/wine-quality.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
View(wine_quality)
base = read.csv('wine-quality/wine-quality.csv', sep = ';')
View(base)
summary(base)
# Encoding da Classe (Transformar em fatores)
base$quality = factor(base$quality, levels = c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
library(caTools)
set.seed(1)
divisao = sample.split(base$income, SplitRatio = 0.75)
print(divisao)
divisao = sample.split(base$quality, SplitRatio = 0.75)
base_treinamento = subset(x = base, divisao == TRUE)
base_testes = subset(base, divisao == FALSE)
classificador = rpart(formula = quality ~ ., data = base_treinamento)
library('rpart.plot')
rpart.plot(classificador)
View(wine_quality)
# install.packages('rpart')
library('rpart')
classificador = rpart(formula = quality ~ ., data = base_treinamento,  control = rpart.control(minbucket = 1))
rpart.plot(classificador)
rpart.plot(classificador)
base = read.csv('wine-quality/wine-quality.csv', sep = ';')
summary(base)
# Escalonamento
base[, 1:11] = scale(base[, 1:11])
# Encoding da Classe (Transformar em fatores)
base$quality = factor(base$quality, levels = c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
library(caTools)
set.seed(1)
divisao = sample.split(base$quality, SplitRatio = 0.75)
print(divisao)
base_treinamento = subset(x = base, divisao == TRUE)
base_testes = subset(base, divisao == FALSE)
# install.packages('rpart')
library('rpart')
classificador = rpart(formula = quality ~ ., data = base_treinamento,  control = rpart.control(minbucket = 1))
library('rpart.plot')
rpart.plot(classificador)
previsoes = predict(classificador, newdata = base_testes[-12], type = 'class')
matriz_confusao = table(base_testes[, 12], previsoes)
print(matriz_confusao)
# install.packages('caret')
library(caret)
# estatisticas do algoritmo de previsão
confusionMatrix(matriz_confusao)
base = read.csv('wine-quality/wine-quality.csv', sep = ';')
base = read.csv('wine-quality/wine-quality.csv', sep = ';')
summary(base)
# Escalonamento
base[, 1:11] = scale(base[, 1:11])
# Encoding da Classe (Transformar em fatores)
base$quality = factor(base$quality, levels = c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
# Encoding da Classe (Transformar em fatores)
base$quality = factor(base$quality, levels = c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
View(base)
library(caTools)
set.seed(1)
divisao = sample.split(base$quality, SplitRatio = 0.80)
print(divisao)
base_treinamento = subset(x = base, divisao == TRUE)
base_testes = subset(base, divisao == FALSE)
View(base_treinamento)
library('rpart.plot')
rpart.plot(classificador)
previsoes = predict(classificador, newdata = base_testes[-4], type = 'class')
matriz_confusao = table(base_testes[, 4], previsoes)
print(matriz_confusao)
# install.packages('caret')
library(caret)
# estatisticas do algoritmo de previsão
confusionMatrix(matriz_confusao)
previsoes = predict(classificador, newdata = base_testes[-4], type = 'class')
matriz_confusao = table(base_testes[, 4], previsoes)
base = read.csv('wine-quality/wine-quality.csv', sep = ';')
summary(base)
# Escalonamento
base[, 1:11] = scale(base[, 1:11])
# Encoding da Classe (Transformar em fatores)
base$quality = factor(base$quality, levels = c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
library(caTools)
set.seed(1)
divisao = sample.split(base$quality, SplitRatio = 0.80)
print(divisao)
base_treinamento = subset(x = base, divisao == TRUE)
base_testes = subset(base, divisao == FALSE)
# install.packages('rpart')
library('rpart')
classificador = rpart(formula = quality ~ ., data = base_treinamento,  control = rpart.control(minbucket = 1))
library('rpart.plot')
rpart.plot(classificador)
summary(base)
print(is.na(base))
sum(is.na(base))
sum(is.na(base))
# Escalonamento
base[, 1:11] = scale(base[, 1:11])
# Encoding da Classe (Transformar em fatores)
base$quality = factor(base$quality, levels = c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
hist(base, main = 'Qualidade do Vinha')
hist(base$quality, main = 'Qualidade do Vinha')
base = read.csv('wine-quality/wine-quality.csv', sep = ';')
hist(base$quality, main = 'Qualidade do Vinha')
# Encoding da Classe (Transformar em fatores)
base$quality = factor(base$quality, ifelse(base$quality >= 6, 'alto', 'baixo'))
# Encoding da Classe (Transformar em fatores)
base$quality = ifelse(base$quality>=6, 1, 0)
View(base_testes)
View(base)
# Encoding da Classe (Transformar em fatores)
base$quality = ifelse(base$quality<=4, 0, ifelse(base$quality<=7, 1, 2))
View(base_testes)
View(base)
# Encoding da Classe (Transformar em fatores)
base$quality = ifelse(base$quality<4, 0, ifelse(base$quality<=7, 1, 2))
View(base)
# Encoding da Classe (Transformar em fatores)
base$quality = ifelse(base$quality<4, 0, ifelse(base$quality<=7, 1, 2))
View(base)
base = read.csv('wine-quality/wine-quality.csv', sep = ';')
# Encoding da Classe (Transformar em fatores)
base$quality = ifelse(base$quality<4, 0, ifelse(base$quality<=7, 1, 2))
hist(base$quality, main = 'Qualidade do Vinho')
hist(base$quality, main = 'Qualidade do Vinho')
set.seed(1)
divisao = sample.split(base$quality, SplitRatio = 0.80)
print(divisao)
base_treinamento = subset(x = base, divisao == TRUE)
base_testes = subset(base, divisao == FALSE)
# install.packages('rpart')
library('rpart')
classificador = rpart(formula = quality ~ ., data = base_treinamento,  control = rpart.control(minbucket = 1))
library('rpart.plot')
rpart.plot(classificador)
previsoes = predict(classificador, newdata = base_testes[-12], type = 'class')
matriz_confusao = table(base_testes[, 12], previsoes)
previsoes = predict(classificador, newdata = base_testes[-12], type = 'class')
library('rpart.plot')
rpart.plot(classificador)
previsoes = predict(classificador, newdata = base_testes[-12], type = 'class')
# install.packages('rpart')
library('rpart')
classificador = rpart(formula = quality ~ ., data = base_treinamento,  control = rpart.control(minbucket = 1))
library('rpart.plot')
rpart.plot(classificador)
previsoes = predict(classificador, newdata = base_testes[-12], type = 'class')
previsoes = predict(classificador, newdata = base_testes[-12], type = 'class')
classificador = rpart(formula = quality ~ ., data = base_treinamento,  control = rpart.control(minbucket = 1))
previsoes = predict(classificador, newdata = base_testes[-12], type = 'class')
matriz_confusao = table(base_testes[, 12], previsoes)
print(matriz_confusao)
# install.packages('caret')
library(caret)
previsoes = predict(classificador, newdata = base_testes[-12], type = 'class')
previsoes = predict(classificador, newdata = base_testes[-12], type = 'vector')
matriz_confusao = table(base_testes[, 12], previsoes)
# install.packages('caret')
library(caret)
print(matriz_confusao)
# install.packages('caret')
library(caret)
# estatisticas do algoritmo de previsão
confusionMatrix(matriz_confusao)
# estatisticas do algoritmo de previsão
confusionMatrix(matriz_confusao)
previsoes = predict(classificador, newdata = base_testes[-12], type = 'c')
previsoes = predict(classificador, newdata = base_testes[-12], type = 'class')
classificador = rpart(formula = quality ~ ., data = base_treinamento)
library('rpart.plot')
rpart.plot(classificador)
,  control = rpart.control(minbucket = 1)
,  control = rpart.control(minbucket = 1)
classificador = rpart(formula = quality ~ ., data = base_treinamento,  control = rpart.control(minbucket = 1))
library('rpart.plot')
rpart.plot(classificador)
base = read.csv('wine-quality/wine-quality.csv', sep = ';')
# Encoding da Classe (Transformar em fatores)
base$quality = ifelse(base$quality<4, 0, ifelse(base$quality<=7, 1, 2))
# Encoding da Classe (Transformar em fatores)
base$quality = ifelse(base$quality<4, 0, ifelse(base$quality<=7, 1, 2))
# Encoding da Classe (Transformar em fatores)
base$quality = ifelse(base$quality<4, 0, ifelse(base$quality<=7, 1, 2))
base$quality = factor(base$quality, levels = (0, 1, 2))
base$quality = factor(base$quality, levels = c(0, 1, 2))
library(caTools)
set.seed(1)
divisao = sample.split(base$quality, SplitRatio = 0.80)
print(divisao)
base_treinamento = subset(x = base, divisao == TRUE)
base_testes = subset(base, divisao == FALSE)
# install.packages('rpart')
library('rpart')
classificador = rpart(formula = quality ~ ., data = base_treinamento,  control = rpart.control(minbucket = 1))
classificador = rpart(formula = quality ~ ., data = base_treinamento,  control = rpart.control(minbucket = 1))
classificador = rpart(formula = quality ~ ., data = base_treinamento[-12],  control = rpart.control(minbucket = 1))
classificador = rpart(formula = quality ~ ., data = base_treinamento,  control = rpart.control(minbucket = 1))
classificador = rpart(formula = quality ~ ., data = base_treinament)
classificador = rpart(formula = quality ~ ., data = base_treinamento)
o,  control = rpart.control(minbucket = 1)
classificador = rpart(formula = quality ~ ., data = base_treinamento,  control = rpart.control(minbucket = 1))
classificador = rpart(formula = quality ~ ., data = base_treinamento,  control = rpart.control(minbucket = 1))
base$quality = factor(base$quality, levels = c(0, 1))
library(caTools)
set.seed(1)
divisao = sample.split(base$quality, SplitRatio = 0.80)
print(divisao)
base_treinamento = subset(x = base, divisao == TRUE)
base_testes = subset(base, divisao == FALSE)
# install.packages('rpart')
library('rpart')
classificador = rpart(formula = quality ~ ., data = base_treinamento,  control = rpart.control(minbucket = 1))
library('rpart.plot')
base = read.csv('wine-quality/wine-quality.csv', sep = ';')
sum(is.na(base))
# Encoding da Classe (Transformar em fatores)
base$quality = ifelse(base$quality<4, 0, ifelse(base$quality<=7, 1, 2))
base$quality = factor(base$quality, levels = c(0, 1, 2))
hist(base$quality, main = 'Qualidade do Vinho')
library(caTools)
set.seed(1)
divisao = sample.split(base$quality, SplitRatio = 0.80)
print(divisao)
base_treinamento = subset(x = base, divisao == TRUE)
base_testes = subset(base, divisao == FALSE)
# install.packages('rpart')
library('rpart')
classificador = rpart(formula = quality ~ ., data = base_treinamento[-12],  control = rpart.control(minbucket = 1))
classificador = rpart(formula = quality ~ ., data = base_treinamento,  control = rpart.control(minbucket = 1))
classificador = rpart(formula = quality ~ ., data = base_treinamento,  control = rpart.control(minbucket = 1))
library('rpart.plot')
rpart.plot(classificador)
previsoes = predict(classificador, newdata = base_testes[-12], type = 'class')
matriz_confusao = table(base_testes[, 12], previsoes)
print(matriz_confusao)
# install.packages('caret')
library(caret)
# estatisticas do algoritmo de previsão
confusionMatrix(matriz_confusao)
classificador = rpart(formula = quality ~ ., data = base_treinamento,  control = rpart.control(minbucket = 3))
library('rpart.plot')
rpart.plot(classificador)
classificador = rpart(formula = quality ~ ., data = base_treinamento,  control = rpart.control(minbucket = 5))
library('rpart.plot')
rpart.plot(classificador)
previsoes = predict(classificador, newdata = base_testes[-12], type = 'class')
matriz_confusao = table(base_testes[, 12], previsoes)
print(matriz_confusao)
# install.packages('caret')
library(caret)
# estatisticas do algoritmo de previsão
confusionMatrix(matriz_confusao)
View(base)
base = read.csv('wine-quality/wine-quality.csv', sep = ';')
sum(is.na(base))
# Encoding da Classe (Transformar em fatores)
base$quality = ifelse(base$quality<4, 0, ifelse(base$quality<=7, 1, 2))
base$quality = factor(base$quality, levels = c(0, 1, 2))
hist(base$quality, main = 'Qualidade do Vinho')
library(caTools)
set.seed(1)
divisao = sample.split(base$quality, SplitRatio = 0.70)
print(divisao)
base_treinamento = subset(x = base, divisao == TRUE)
base_testes = subset(base, divisao == FALSE)
# install.packages('rpart')
library('rpart')
classificador = rpart(formula = quality ~ ., data = base_treinamento,  control = rpart.control(minbucket = 5))
library('rpart.plot')
rpart.plot(classificador)
previsoes = predict(classificador, newdata = base_testes[-12], type = 'class')
previsoes = predict(classificador, newdata = base_testes[-12], type = 'class')
matriz_confusao = table(base_testes[, 12], previsoes)
print(matriz_confusao)
# install.packages('caret')
library(caret)
# estatisticas do algoritmo de previsão
confusionMatrix(matriz_confusao)
# Encoding da Classe (Transformar em fatores)
base$quality = ifelse(base$quality<6, 0, 1)
base = read.csv('wine-quality/wine-quality.csv', sep = ';')
sum(is.na(base))
# Encoding da Classe (Transformar em fatores)
base$quality = ifelse(base$quality<6, 0, 1)
base$quality = factor(base$quality, levels = c(0, 1, 2))
hist(base$quality, main = 'Qualidade do Vinho')
library(caTools)
set.seed(1)
divisao = sample.split(base$quality, SplitRatio = 0.70)
print(divisao)
base_treinamento = subset(x = base, divisao == TRUE)
base_testes = subset(base, divisao == FALSE)
# install.packages('rpart')
library('rpart')
classificador = rpart(formula = quality ~ ., data = base_treinamento,  control = rpart.control(minbucket = 5))
library('rpart.plot')
rpart.plot(classificador)
previsoes = predict(classificador, newdata = base_testes[-12], type = 'class')
matriz_confusao = table(base_testes[, 12], previsoes)
print(matriz_confusao)
base = read.csv('wine-quality/wine-quality.csv', sep = ';')
sum(is.na(base))
# Encoding da Classe (Transformar em fatores)
base$quality = ifelse(base$quality<6, 0, 1)
base$quality = factor(base$quality, levels = c(0, 1))
hist(base$quality, main = 'Qualidade do Vinho')
library(caTools)
set.seed(1)
divisao = sample.split(base$quality, SplitRatio = 0.70)
print(divisao)
base = read.csv('wine-quality/wine-quality.csv', sep = ';')
sum(is.na(base))
# Encoding da Classe (Transformar em fatores)
base$quality = ifelse(base$quality<6, 0, 1)
base$quality = factor(base$quality, levels = c(0, 1))
hist(base$quality, main = 'Qualidade do Vinho')
library(caTools)
hist(base$quality, main = 'Qualidade do Vinho')
# Encoding da Classe (Transformar em fatores)
base$quality = ifelse(base$quality<6, 0, 1)
hist(base$quality, main = 'Qualidade do Vinho')
base = read.csv('wine-quality/wine-quality.csv', sep = ';')
sum(is.na(base))
# Encoding da Classe (Transformar em fatores)
base$quality = ifelse(base$quality<6, 0, 1)
hist(base$quality, main = 'Qualidade do Vinho')
base$quality = factor(base$quality, levels = c(0, 1))
library(caTools)
set.seed(1)
divisao = sample.split(base$quality, SplitRatio = 0.70)
print(divisao)
base_treinamento = subset(x = base, divisao == TRUE)
base_testes = subset(base, divisao == FALSE)
# install.packages('rpart')
library('rpart')
classificador = rpart(formula = quality ~ ., data = base_treinamento,  control = rpart.control(minbucket = 5))
library('rpart.plot')
rpart.plot(classificador)
previsoes = predict(classificador, newdata = base_testes[-12], type = 'class')
matriz_confusao = table(base_testes[, 12], previsoes)
print(matriz_confusao)
# install.packages('caret')
library(caret)
# estatisticas do algoritmo de previsão
confusionMatrix(matriz_confusao)
base = read.csv('wine-quality/wine-quality.csv', sep = ';')
sum(is.na(base))
# Encoding da Classe (Transformar em fatores)
base$quality = ifelse(base$quality<6, 0, 1)
hist(base$quality, main = 'Qualidade do Vinho')
base$quality = factor(base$quality, levels = c(0, 1))
library(caTools)
set.seed(1)
divisao = sample.split(base$quality, SplitRatio = 0.75)
print(divisao)
base_treinamento = subset(x = base, divisao == TRUE)
base_testes = subset(base, divisao == FALSE)
# install.packages('rpart')
library('rpart')
classificador = rpart(formula = quality ~ ., data = base_treinamento,  control = rpart.control(minbucket = 5))
library('rpart.plot')
rpart.plot(classificador)
previsoes = predict(classificador, newdata = base_testes[-12], type = 'class')
matriz_confusao = table(base_testes[, 12], previsoes)
print(matriz_confusao)
# install.packages('caret')
library(caret)
# estatisticas do algoritmo de previsão
confusionMatrix(matriz_confusao)
base = read.csv('wine-quality/wine-quality.csv', sep = ';')
sum(is.na(base))
# Encoding da Classe (Transformar em fatores)
base$quality = ifelse(base$quality<6, 0, 1)
hist(base$quality, main = 'Qualidade do Vinho')
base$quality = factor(base$quality, levels = c(0, 1))
library(caTools)
set.seed(1)
divisao = sample.split(base$quality, SplitRatio = 0.80)
print(divisao)
base_treinamento = subset(x = base, divisao == TRUE)
base_testes = subset(base, divisao == FALSE)
# install.packages('rpart')
library('rpart')
classificador = rpart(formula = quality ~ ., data = base_treinamento,  control = rpart.control(minbucket = 5))
library('rpart.plot')
rpart.plot(classificador)
previsoes = predict(classificador, newdata = base_testes[-12], type = 'class')
matriz_confusao = table(base_testes[, 12], previsoes)
print(matriz_confusao)
# install.packages('caret')
library(caret)
# estatisticas do algoritmo de previsão
confusionMatrix(matriz_confusao)
classificador = rpart(formula = quality ~ ., data = base_treinamento,  control = rpart.control(minbucket = 3))
rpart.plot(classificador)
previsoes = predict(classificador, newdata = base_testes[-12], type = 'class')
matriz_confusao = table(base_testes[, 12], previsoes)
print(matriz_confusao)
# install.packages('caret')
library(caret)
# estatisticas do algoritmo de previsão
confusionMatrix(matriz_confusao)
# install.packages('rpart')
library('rpart')
classificador = rpart(formula = quality ~ ., data = base_treinamento,  control = rpart.control(minbucket = 2))
library('rpart.plot')
rpart.plot(classificador)
previsoes = predict(classificador, newdata = base_testes[-12], type = 'class')
matriz_confusao = table(base_testes[, 12], previsoes)
print(matriz_confusao)
# install.packages('caret')
library(caret)
# estatisticas do algoritmo de previsão
confusionMatrix(matriz_confusao)
classificador = rpart(formula = quality ~ ., data = base_treinamento,  control = rpart.control(minbucket = 1))
library('rpart.plot')
rpart.plot(classificador)
base = read.csv('wine-quality/wine-quality.csv', sep = ';')
sum(is.na(base))
# Encoding da Classe (Transformar em fatores)
base$quality = ifelse(base$quality<6, 0, 1)
hist(base$quality, main = 'Qualidade do Vinho')
base$quality = factor(base$quality, levels = c(0, 1))
library(caTools)
set.seed(1)
divisao = sample.split(base$quality, SplitRatio = 0.80)
print(divisao)
base_treinamento = subset(x = base, divisao == TRUE)
base_testes = subset(base, divisao == FALSE)
# install.packages('rpart')
library('rpart')
classificador = rpart(formula = quality ~ ., data = base_treinamento,  control = rpart.control(minbucket = 1))
library('rpart.plot')
rpart.plot(classificador)
previsoes = predict(classificador, newdata = base_testes[-12], type = 'class')
matriz_confusao = table(base_testes[, 12], previsoes)
print(matriz_confusao)
# install.packages('caret')
library(caret)
# estatisticas do algoritmo de previsão
confusionMatrix(matriz_confusao)
base = read.csv('wine-quality/wine-quality.csv', sep = ';')
sum(is.na(base))
# Encoding da Classe (Transformar em fatores)
base$quality = ifelse(base$quality<6, 0, 1)
hist(base$quality, main = 'Qualidade do Vinho')
base$quality = factor(base$quality, levels = c(0, 1))
library(caTools)
set.seed(1)
divisao = sample.split(base$quality, SplitRatio = 0.80)
print(divisao)
base_treinamento = subset(x = base, divisao == TRUE)
base_testes = subset(base, divisao == FALSE)
# install.packages('rpart')
library('rpart')
classificador = rpart(formula = quality ~ ., data = base_treinamento)
library('rpart.plot')
rpart.plot(classificador)
previsoes = predict(classificador, newdata = base_testes[-12], type = 'class')
matriz_confusao = table(base_testes[, 12], previsoes)
print(matriz_confusao)
# install.packages('caret')
library(caret)
# estatisticas do algoritmo de previsão
confusionMatrix(matriz_confusao)
